#!/usr/bin/env python3
"""
ESP32-CAM Credentials Setup Script with NVS Partition Support
This script helps you securely configure your ESP32-CAM credentials and flash them to NVS.
"""

import argparse
import sys
import os
import json
import subprocess
import shutil
from pathlib import Path
from datetime import datetime
import getpass

def create_config_header(wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key):
    """Create a temporary config header file with credentials (fallback method)."""
    
    config_content = f"""#ifndef TEMP_CONFIG_H
#define TEMP_CONFIG_H

// This file is auto-generated by setup_credentials.py
// DO NOT commit this file to version control!
// NOTE: This is fallback - primary method uses NVS partition

// WiFi credentials
#define TEMP_WIFI_SSID "{wifi_ssid}"
#define TEMP_WIFI_PASSWORD "{wifi_password}"

// Firebase credentials
#define TEMP_FIREBASE_PROJECT_ID "{firebase_project_id}"
#define TEMP_FIREBASE_DB_URL "{firebase_db_url}"
#define TEMP_FIREBASE_API_KEY "{firebase_api_key}"

#endif // TEMP_CONFIG_H
"""
    
    # Check if we're in a main directory or project root
    if os.path.exists("include") and os.path.exists("src"):
        # We're in main directory, create in include/
        header_path = "include/temp_config.h"
        os.makedirs("include", exist_ok=True)
    elif os.path.exists("main/include") and os.path.exists("main/src"):
        # We're in project root with main subdirectory
        header_path = "main/include/temp_config.h"
        os.makedirs("main/include", exist_ok=True)
    else:
        # Default behavior - create main directory
        header_path = "main/temp_config.h"
        os.makedirs("main", exist_ok=True)
    
    with open(header_path, "w") as f:
        f.write(config_content)
    
    print(f"✓ Created {header_path} (fallback)")

def create_credentials_json(wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key):
    """Create a JSON file with credentials for easy loading."""
    
    credentials = {
        "wifi": {
            "ssid": wifi_ssid,
            "password": wifi_password
        },
        "firebase": {
            "project_id": firebase_project_id,
            "database_url": firebase_db_url,
            "api_key": firebase_api_key
        },
        "metadata": {
            "created_at": datetime.now().isoformat(),
            "script_version": "2.0"
        }
    }
    
    with open("credentials.json", "w") as f:
        json.dump(credentials, f, indent=2)
    
    print("✓ Created credentials.json")
    return credentials

def generate_nvs_csv(credentials, csv_path="credentials.csv"):
    """Generate NVS CSV file from credentials with 15-char key limit."""
    
    with open(csv_path, "w") as f:
        f.write("key,type,encoding,value\n")
        # NVS keys must be <= 15 characters
        f.write(f"wifi_ssid,data,string,{credentials['wifi']['ssid']}\n")
        f.write(f"wifi_pass,data,string,{credentials['wifi']['password']}\n")
        f.write(f"fb_project,data,string,{credentials['firebase']['project_id']}\n")
        f.write(f"fb_db_url,data,string,{credentials['firebase']['database_url']}\n")
        f.write(f"fb_api_key,data,string,{credentials['firebase']['api_key']}\n")
    
    print(f"✓ Created {csv_path}")
    print("📝 NVS key mappings:")
    print("  - wifi_ssid → WiFi SSID")
    print("  - wifi_pass → WiFi Password") 
    print("  - fb_project → Firebase Project ID")
    print("  - fb_db_url → Firebase Database URL")
    print("  - fb_api_key → Firebase API Key")
    return csv_path

def generate_nvs_bin(csv_path, bin_path="credentials.bin", partition_size=0x5000):
    """Generate NVS binary file from CSV using ESP-IDF tools."""
    
    idf_path = os.environ.get("IDF_PATH")
    if not idf_path:
        raise EnvironmentError(
            "IDF_PATH environment variable is not set. "
            "Please source the ESP-IDF environment: '. $HOME/esp/esp-idf/export.sh'"
        )
    
    gen_script = os.path.join(
        idf_path, 
        "components", 
        "nvs_flash", 
        "nvs_partition_generator", 
        "nvs_partition_gen.py"
    )
    
    if not os.path.exists(gen_script):
        raise FileNotFoundError(f"NVS partition generator not found at: {gen_script}")
    
    cmd = [
        "python3", gen_script,
        "generate", csv_path, bin_path, hex(partition_size)
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"✓ Generated {bin_path}")
        return bin_path
    except subprocess.CalledProcessError as e:
        print(f"❌ Error generating NVS binary: {e}")
        print(f"Command output: {e.stdout}")
        print(f"Command error: {e.stderr}")
        raise

def flash_nvs_bin(bin_path, port=None, baud=115200, nvs_offset=0x9000):
    """Flash NVS binary to ESP32."""
    
    # Check if esptool.py is available
    if not shutil.which("esptool.py"):
        raise EnvironmentError(
            "esptool.py not found. Please install it: pip install esptool"
        )
    
    # Auto-detect port if not specified
    if not port:
        port = detect_esp32_port()
        if not port:
            raise RuntimeError("Could not detect ESP32 port. Please specify --port")
    
    cmd = [
        "esptool.py",
        "--port", port,
        "--baud", str(baud),
        "write_flash", hex(nvs_offset), bin_path
    ]
    
    try:
        print(f"🔄 Flashing {bin_path} to NVS partition at {hex(nvs_offset)}...")
        result = subprocess.run(cmd, check=True)
        print(f"✅ Successfully flashed credentials to ESP32 at {port}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Error flashing to ESP32: {e}")
        return False

def detect_esp32_port():
    """Try to auto-detect ESP32 port."""
    
    common_ports = [
        "/dev/ttyUSB0", "/dev/ttyUSB1", "/dev/ttyUSB2",
        "/dev/ttyACM0", "/dev/ttyACM1", "/dev/ttyACM2",
        "/dev/cu.SLAB_USBtoUART", "/dev/cu.usbserial-*",
        "COM3", "COM4", "COM5", "COM6", "COM7", "COM8"
    ]
    
    for port in common_ports:
        if os.path.exists(port):
            return port
    
    # Try to use pyserial to list ports
    try:
        import serial.tools.list_ports
        ports = list(serial.tools.list_ports.comports())
        for port in ports:
            if "USB" in port.description or "UART" in port.description:
                return port.device
    except ImportError:
        pass
    
    return None

def create_gitignore():
    """Create or update .gitignore file."""
    
    gitignore_entries = [
        "# Credentials and sensitive files",
        "credentials.json",
        "credentials.csv",
        "credentials.bin",
        "temp_config.h",
        "main/temp_config.h",
        "include/temp_config.h",
        "main/include/temp_config.h",
        "",
        "# Build files",
        "build/",
        "sdkconfig",
        "sdkconfig.old",
        "",
        "# IDE files",
        ".vscode/",
        ".idea/",
        "*.swp",
        "*.swo",
        "*~",
        "",
        "# ESP-IDF specific",
        "managed_components/",
        "dependencies.lock",
        "",
    ]
    
    gitignore_path = Path(".gitignore")
    
    if gitignore_path.exists():
        with open(gitignore_path, "r") as f:
            existing_content = f.read()
        
        # Check if our entries are already there
        if "credentials.json" in existing_content and "credentials.bin" in existing_content:
            print("✓ .gitignore already contains credential files")
            return
        
        # Append our entries
        with open(gitignore_path, "a") as f:
            f.write("\n" + "\n".join(gitignore_entries))
        print("✓ Updated .gitignore")
    else:
        # Create new .gitignore
        with open(gitignore_path, "w") as f:
            f.write("\n".join(gitignore_entries))
        print("✓ Created .gitignore")

def validate_inputs(wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key):
    """Validate input parameters."""
    
    errors = []
    warnings = []
    
    if not wifi_ssid or len(wifi_ssid.strip()) == 0:
        errors.append("WiFi SSID cannot be empty")
    
    if not wifi_password or len(wifi_password.strip()) == 0:
        errors.append("WiFi password cannot be empty")
    
    if not firebase_project_id or len(firebase_project_id.strip()) == 0:
        errors.append("Firebase project ID cannot be empty")
    
    if not firebase_db_url or len(firebase_db_url.strip()) == 0:
        errors.append("Firebase database URL cannot be empty")
    
    if not firebase_api_key or len(firebase_api_key.strip()) == 0:
        errors.append("Firebase API key cannot be empty")
    
    if firebase_db_url and not firebase_db_url.startswith("https://"):
        errors.append("Firebase database URL should start with https://")
    
    if firebase_db_url and not firebase_db_url.endswith(".firebaseio.com/"):
        warnings.append("Firebase database URL should end with '.firebaseio.com/'")
    
    if len(wifi_ssid) > 31:
        errors.append("WiFi SSID too long (max 31 characters)")
    
    if len(wifi_password) > 63:
        errors.append("WiFi password too long (max 63 characters)")
    
    if len(wifi_password) < 8:
        warnings.append("WiFi password is shorter than 8 characters (WPA2 minimum)")
    
    if firebase_api_key and len(firebase_api_key) < 30:
        warnings.append("Firebase API key seems unusually short")
    
    # Check for special characters that might cause issues
    if '"' in wifi_ssid or '"' in wifi_password:
        errors.append("WiFi credentials cannot contain double quotes")
    
    # Check for CSV special characters
    csv_special_chars = [',', '\n', '\r']
    for char in csv_special_chars:
        if char in wifi_ssid or char in wifi_password or char in firebase_project_id or char in firebase_db_url or char in firebase_api_key:
            errors.append(f"Credentials cannot contain special characters: {repr(char)}")
    
    return errors, warnings

def interactive_setup():
    """Interactive credential setup."""
    
    print("ESP32-CAM Credentials Setup with NVS Support")
    print("=" * 45)
    print()
    
    # WiFi credentials
    print("WiFi Configuration:")
    wifi_ssid = input("Enter WiFi SSID: ").strip()
    wifi_password = getpass.getpass("Enter WiFi Password: ").strip()
    print()
    
    # Firebase credentials
    print("Firebase Configuration:")
    firebase_project_id = input("Enter Firebase Project ID: ").strip()
    firebase_db_url = input("Enter Firebase Database URL: ").strip()
    firebase_api_key = getpass.getpass("Enter Firebase API Key: ").strip()
    print()
    
    # Validate inputs
    errors, warnings = validate_inputs(wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key)
    
    if warnings:
        print("⚠️  Warnings:")
        for warning in warnings:
            print(f"  - {warning}")
        print()
    
    if errors:
        print("❌ Validation errors:")
        for error in errors:
            print(f"  - {error}")
        return False
    
    # Confirm
    print("Configuration Summary:")
    print(f"WiFi SSID: {wifi_ssid}")
    print(f"WiFi Password: {'*' * len(wifi_password)}")
    print(f"Firebase Project ID: {firebase_project_id}")
    print(f"Firebase Database URL: {firebase_db_url}")
    print(f"Firebase API Key: {firebase_api_key[:8]}...")
    print()
    
    confirm = input("Save these credentials? (y/N): ").strip().lower()
    if confirm != 'y':
        print("Setup cancelled.")
        return False
    
    # Ask about flashing
    flash_now = input("Flash credentials to ESP32 now? (Y/n): ").strip().lower()
    if flash_now in ['', 'y', 'yes']:
        port = input("ESP32 port (leave empty for auto-detect): ").strip()
        if not port:
            port = None
    else:
        port = False
    
    return process_credentials(wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key, port)

def process_credentials(wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key, port=None):
    """Process and save credentials."""
    
    try:
        # Create files
        credentials = create_credentials_json(wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key)
        create_config_header(wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key)
        create_gitignore()
        
        # Generate NVS files
        print("\n🔄 Generating NVS partition...")
        csv_path = generate_nvs_csv(credentials)
        bin_path = generate_nvs_bin(csv_path)
        
        # Flash to ESP32 if requested
        if port is not False:
            print("\n🔄 Flashing to ESP32...")
            if flash_nvs_bin(bin_path, port):
                print("\n✅ Credentials successfully flashed to ESP32!")
            else:
                print("\n⚠️  Flashing failed, but files are ready for manual flashing")
        
        print("\n✅ Credentials setup complete!")
        print()
        print("📁 Generated files:")
        print("  - credentials.json (backup)")
        print("  - credentials.csv (NVS source)")
        print("  - credentials.bin (NVS partition)")
        print("  - temp_config.h (fallback header)")
        print()
        print("🚀 Next steps:")
        if port is False:
            print("1. Flash manually: esptool.py --port /dev/ttyUSB0 write_flash 0x9000 credentials.bin")
            print("2. Build and flash your project: idf.py build flash monitor")
        else:
            print("1. Build and flash your project: idf.py build flash monitor")
        print("2. Your ESP32-CAM will load credentials from NVS automatically")
        print()
        print("💡 Your ESP32 code should use these NVS keys:")
        print("  - nvs_get_str(handle, \"wifi_ssid\", buffer, &length)")
        print("  - nvs_get_str(handle, \"wifi_pass\", buffer, &length)")
        print("  - nvs_get_str(handle, \"fb_project\", buffer, &length)")
        print("  - nvs_get_str(handle, \"fb_db_url\", buffer, &length)")
        print("  - nvs_get_str(handle, \"fb_api_key\", buffer, &length)")
        
        return True
        
    except Exception as e:
        print(f"\n❌ Error during setup: {e}")
        return False

def load_credentials_from_json(json_file):
    """Load credentials from existing JSON file."""
    
    try:
        with open(json_file, 'r') as f:
            data = json.load(f)
        
        wifi_ssid = data['wifi']['ssid']
        wifi_password = data['wifi']['password']
        firebase_project_id = data['firebase']['project_id']
        firebase_db_url = data['firebase']['database_url']
        firebase_api_key = data['firebase']['api_key']
        
        return wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key
    
    except (FileNotFoundError, KeyError, json.JSONDecodeError) as e:
        print(f"❌ Error loading credentials from {json_file}: {e}")
        return None, None, None, None, None

def main():
    parser = argparse.ArgumentParser(description="Setup ESP32-CAM credentials with NVS support")
    parser.add_argument("--wifi-ssid", help="WiFi SSID")
    parser.add_argument("--wifi-password", help="WiFi password")
    parser.add_argument("--firebase-project-id", help="Firebase project ID")
    parser.add_argument("--firebase-db-url", help="Firebase database URL")
    parser.add_argument("--firebase-api-key", help="Firebase API key")
    parser.add_argument("--interactive", "-i", action="store_true", help="Interactive setup")
    parser.add_argument("--from-json", help="Load credentials from JSON file")
    parser.add_argument("--port", "-p", help="ESP32 serial port (e.g., /dev/ttyUSB0)")
    parser.add_argument("--no-flash", action="store_true", help="Don't flash to ESP32, just generate files")
    parser.add_argument("--baud", type=int, default=115200, help="Serial baud rate (default: 115200)")
    
    args = parser.parse_args()
    
    # Load from JSON file if specified
    if args.from_json:
        wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key = load_credentials_from_json(args.from_json)
        if not all([wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key]):
            return False
    else:
        wifi_ssid = args.wifi_ssid
        wifi_password = args.wifi_password
        firebase_project_id = args.firebase_project_id
        firebase_db_url = args.firebase_db_url
        firebase_api_key = args.firebase_api_key
    
    # Interactive setup if missing parameters or explicitly requested
    if args.interactive or not all([wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key]):
        return interactive_setup()
    
    # Validate inputs
    errors, warnings = validate_inputs(wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key)
    
    if warnings:
        print("⚠️  Warnings:")
        for warning in warnings:
            print(f"  - {warning}")
        print()
    
    if errors:
        print("❌ Validation errors:")
        for error in errors:
            print(f"  - {error}")
        return False
    
    # Determine port
    port = args.port if not args.no_flash else False
    
    return process_credentials(wifi_ssid, wifi_password, firebase_project_id, firebase_db_url, firebase_api_key, port)

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n❌ Setup interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"❌ Unexpected error: {e}")
        sys.exit(1)